# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SoBUDMchVUTgpXS5ojW8V4psHTELP5Hn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/cinematTicket.csv')

df

df.head()

df.tail()

df.shape

df.columns

df.dtypes

print(df.isnull().sum())
# Handle missing values if needed
df = df.dropna()

#Understand unique values in categorical columns
print("Unique values in 'cinema_code':", df['cinema_code'].unique())
print("Unique values in 'film_code':", df['film_code'].unique())

# Time series plot for total sales over time
plt.figure(figsize=(12, 6))
sns.lineplot(x='date', y='total_sales', data=df, marker='o', color='green')
plt.title('Time Series Plot - Total Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.show()

#Examine correlations between numerical variables
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Histogram for total sales
plt.figure(figsize=(10, 6))
sns.histplot(df['total_sales'], bins=20, kde=True, color='skyblue')
plt.title('Distribution of Total Sales')
plt.xlabel('Total Sales')
plt.ylabel('Frequency')
plt.show()

# Scatter plot for ticket price and total sales
plt.figure(figsize=(10, 6))
sns.scatterplot(x='ticket_price', y='total_sales', data=df, color='coral')
plt.title('Scatter Plot - Ticket Price vs Total Sales')
plt.xlabel('Ticket Price')
plt.ylabel('Total Sales')
plt.show()

#predictive modelling using linear regression

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Assume 'X' contains features and 'y' is the target variable ('total_sales')
X = df[['ticket_price', 'tickets_sold', 'show_time', 'occu_perc', 'ticket_use', 'capacity']]
y = df['total_sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')